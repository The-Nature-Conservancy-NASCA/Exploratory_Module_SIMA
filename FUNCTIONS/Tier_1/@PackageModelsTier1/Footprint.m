function [ErrorNumber, Factor, varargout] = Footprint(obj, Hp, DEM, Threshold, Network, FuncNetwork, ModeA, varargin)
% -------------------------------------------------------------------------
% Matlab Version - R2018b 
% -------------------------------------------------------------------------
%                              BASE DATA 
%--------------------------------------------------------------------------
% Author        : Jonathan Nogales Pimentel
% Email         : jonathannogales02@gmail.com
% Occupation    : Hydrology Specialist
% Company       : The Nature Conservancy - TNC
% Date          : October, 2018
%
%--------------------------------------------------------------------------
% This program is free software: you can redistribute it and/or modify it 
% under the terms of the GNU General Public License as published by the 
% Free Software Foundation, either version 3 of the License, or option) any 
% later version. This program is distributed in the hope that it will be 
% useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
% ee the GNU General Public License for more details. You should have 
% received a copy of the GNU General Public License along with this program
% If not, see http://www.gnu.org/licenses/.
%--------------------------------------------------------------------------
%                               DESCRIPTION 
%--------------------------------------------------------------------------
% This function estimate the footprint that generated by the projects 
% in differents Areas 
%--------------------------------------------------------------------------
%                               INPUT DATA 
%--------------------------------------------------------------------------
%
%   DEM         [GRIDobj]                   = Digital Elevation Model
%   Hp          [ClassHydroelectricProject] = Hydropower Development plan
%   Network     [ClassNetwork]              = Tological Network
%   Threshold   [integer]                   = Amoung of cell by create a basin
%   FuncNetwork [w,z,m]                     = topological network fragmentation 
%                                             with the projects analysed in 
%                                             every scenario.
%   varargin
%       1. FlowDir   [FLOWobj] = Direction flow 
%       2. FlowAccum [GRIDobj] = Accumulate flow 
%       3. Area      [Matrix]  = Areas of the internet social, environment 
%                                and economic
%       ... n Areas
%
%--------------------------------------------------------------------------
%                              OUTPUT DATA 
%--------------------------------------------------------------------------
% n = Factor 
% m = Project Number 
% k = Areas Number 
%
% ErrorNumber   [integer]       = Error of the Code
% Factor            [n]             = Percentage of height of each project
% Varargout
%   .Area_Hp           [n,m]        = Factor Vs Area Curve of the projects
%   .Volumen_Hp        [n,m]        = Factor Vs Volumen Curve of the projects
%   .Footprint_Hp      [n,m,k]      = Footprint of the project 
%   .WaterMirrorDams   [GRIDobj]    = Water Mirror of the projects
%
%--------------------------------------------------------------------------
%                              REFERENCES
%--------------------------------------------------------------------------
% - https://www.nature.org/media/freshwater/power-of-rivers-report.pdf
% - https://www.seforall.org/sites/default/files/powerofriversreport_final1.pdf
%

ErrorNumber     = -1;
varargout{1}    = NaN;
varargout{2}    = NaN;
varargout{3}    = NaN;
varargout{4}    = NaN;
varargout{5}    = NaN;
varargout{6}    = NaN;

if ModeA
    Factor          = linspace(0, 1, 101);
else
    Factor          = 1;
end    

%% Check of Input data 
n_input = nargin;

if ~isa(Hp, 'ClassHydroelectricProject')
    ErrorNumber = 7;    
    disp('The Hp do not is one ClassHydroelectricProject')
    return
end

if ~isa(DEM, 'GRIDobj')
    ErrorNumber = 8;    
    disp('The DEM do not is one GRIDobj')
    return
else
    DEM_Fill    = DEM.fillsinks; 
    SizePixel   = DEM.cellsize*(110.5405*1000); 
end

if (n_input == 7)
    % Get FLowDir 
    FlowDir     = FLOWobj(DEM_Fill);
    % Get FlowAccum
    FlowAccum   = FlowDir.flowacc;    
end

if (n_input > 7)
    % Get FlowDir
    if isa(varargin{1}, 'FLOWobj')
        FlowDir = varargin{1};
    else
        % Estimate FlowDir
        FlowDir = FLOWobj(DEM_Fill);
    end
end

if (n_input > 8)
    % Get FlowAccum
    if isa(varargin{2}, 'GRIDobj')
        FlowAccum   = varargin{2};
    else
        % Estimate FlowAccum
        FlowAccum   = FlowDir.flowacc;
    end
end
   
ModeFoot = 0;
if (n_input >= 10)        
    Areas = varargin{3};
    ModeFoot = 1;
end

clearvars varargin X_DEM Y_DEM Xq Yq xq yq Zq DEM_Fill  

%% Check Coordinates of the Projects
[IX,~]  = coord2ind(DEM, Hp.Coor_X(Hp.Scenario), Hp.Coor_Y(Hp.Scenario));    
if (sum(isnan(IX)) > 0)
    ErrorNumber = 9;    
    tmp = Hp.ID;
    disp(['The coordinates of the project [ ID : ' num2str(tmp(isnan(IX))),' ] do not is whitin of the DEM'])
    return
end

%% Get Network 
W       = FlowAccum > Threshold;

if nargout >= 7
    varargout{6} = FlowAccum;
    clearvars FlowAccum
else
    clearvars FlowAccum
end

%% Correct position of the project         
[IXc,~] = snap2stream(W,IX);

%% Get Higth Dams
HeightDams = zeros(length(IXc),1);
for i = 1:length(IXc)
    HeightDams(i)   = DEM.Z(IXc(i));
end

%% Check Projects if is Mutually Excluding
P_Act = find(Hp.Scenario == 1);
for i = 1:length(IXc)
    ID_1    = Hp.ID(P_Act(i));
    ID_2    = FuncNetwork(Network.ID == Hp.ArcID(P_Act(i)));
    if (ID_2 ~= 0) && (ID_1 ~= ID_2)
        h       = Hp.Height(P_Act);
        H2      = h(Hp.ID(P_Act) == ID_2) + HeightDams(Hp.ID(P_Act) == ID_2);        
        if (H2 >= HeightDams(i))
            ErrorNumber = 10;
            disp(['Exist a conflict between the project ',num2str(ID_1),' and ',num2str(ID_2),'.'])
            return
        end
    end
end 

%% Deliniation Catchment
Basin = drainagebasins(FlowDir, IXc);

if nargout == 8
    varargout{5} = FlowDir;
else
    clearvars FlowDir
end

%% Water Mirror Dams
if nargout >=5
    WaterMirrorDams     = DEM;
    WaterMirrorDams.Z   = WaterMirrorDams.Z*NaN;
end

%% Estimation Footprint
Area_Hp         = NaN(length(Factor), length(Hp.ID(Hp.Scenario)));
Volumen_Hp      = NaN(length(Factor), length(Hp.ID(Hp.Scenario)));   
if ModeFoot == 1
    Footprint_Hp    = NaN(length(Factor), length(Hp.ID(Hp.Scenario)), length(fields(Areas)));
end

for Pro = 1:length(IXc)
    %% Height Vs Area and Volumen
    for i = 1:length(Factor)
        id                  = find( Basin.Z == Pro);
        idd                 = id(DEM.Z(id) <= ( HeightDams(Pro) + (Hp.Height(P_Act(Pro))*Factor(i)) ));
        Area_Hp (i,Pro)     = length(idd)*(SizePixel.^2);
        Volumen_Hp(i,Pro)   = double(sum( (( HeightDams(Pro) + (Hp.Height(P_Act(Pro))*Factor(i)) ) - DEM.Z(idd))*(SizePixel.^2) , 'omitnan'));

        % Water Mirror 
        if nargout >=5
            if ModeA
                di = find( ~isnan(WaterMirrorDams.Z) );
                if isempty(di)
                    WaterMirrorDams.Z(idd) = Factor(i); 
                else
                    [PoPo,~] = ismember(idd,di);
                    WaterMirrorDams.Z(idd(PoPo == 0)) = Factor(i); 
                end
            else
                di = find( ~isnan(WaterMirrorDams.Z) );
                if isempty(di)
                    WaterMirrorDams.Z(idd) = Hp.ID(P_Act(Pro)); 
                else
                    [PoPo,~] = ismember(idd,di);
                    WaterMirrorDams.Z(idd(PoPo == 0)) = Hp.ID(P_Act(Pro)); 
                end
            end
        end
        
        %% Footprint
        if ModeFoot == 1
            Tmp = fields(Areas);
            for j = 1:length(Tmp)
                eval( ['[iddd, ~] = ismember(Areas.A',num2str(j),'(:,1), idd);'] );
                Footprint_Hp(i,Pro,j) = eval( ['sum(Areas.A',num2str(j),'(iddd,2)*(SizePixel.^2));'] );
            end
        end                
    end
end

%% OUTPUTS
if nargout >= 3
    varargout{1} = Area_Hp;
end
if nargout >= 4
    varargout{2} = Volumen_Hp;
end
if nargout >=5
    varargout{3} = WaterMirrorDams;
end
if ModeFoot == 1
    varargout{4} = Footprint_Hp;
else
    varargout{4} = [];
end

